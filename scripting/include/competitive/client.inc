#if defined _client_included
  #endinput
#endif

#define _client_included

stock bool:client_is_player (id) {
	return TEAM_TERRORIST <= client_get_team(id) <= TEAM_CT;
}

stock bool:client_is_spectator (id) {
	return client_get_team(id) == TEAM_SPECTATOR;
}

stock bool:client_is_terrorist (id) {
	return client_get_team(id) == TEAM_TERRORIST;
}

stock bool:client_is_ct (id) {
	return client_get_team(id) == TEAM_CT;
}

stock clients_print_money () {
	static players[MAX_PLAYERS], count, id;
	get_players(players, count, "ah");

	for (new i; i < count; i++) {
		id = players[i];
		client_cmd(id, "say_team $%i", client_get_money(id));
	}
}

stock is_player_id (id) {
	return 1 <= id <= MAX_PLAYERS + 1;
}

stock check_team (id, TeamName:team) {
	if (valid_jointeam(id, team))
		return PLUGIN_CONTINUE;

	return PLUGIN_HANDLED;
}

stock bool:valid_jointeam (const id, TeamName:team) {
	if (game_is_started() && client_is_player(id)) {
		chat_print(id, "%L", LANG_SERVER, "PUG_TEAMS_NOT_CHANGE");
		return false;
	}

	new TeamName:new_team;

	switch (team) {
		case TEAM_SPECTATOR: {
			if (!is_spectator_allowed() && !access(id, PUG_CMD_LVL)) {
				chat_print(id, "%L", LANG_SERVER, "PUG_TEAMS_SPECTATORS");
				return false;
			}

			return true;
		}
		case TEAM_UNASSIGNED: {
			new_team = TeamName:random_num(_:TEAM_TERRORIST, _:TEAM_CT);
		}
		default: {
			new_team = team;
		}
	}

	if (team_is_full(new_team)) {
		chat_print(id, "%L", LANG_SERVER, "PUG_TEAMS_FULL", team_name[new_team]);
		client_cmd(id, "chooseteam");
		return false;
	}

	return true;
}

stock user_joined (id) {
	set_task(5.0, "show_owners", id, _, _, "a", 1);
}
